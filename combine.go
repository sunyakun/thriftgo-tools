package thriftgo_tools

import (
	"bytes"
	"fmt"
	"path"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/cloudwego/thriftgo/parser"
	"github.com/duke-git/lancet/v2/slice"
)

var templateText = `// generated by thriftgo-tools/cmd/combine.
{{ range .Includes }}include "{{ . }}"
{{ end }}
namespace go {{.Namespace}}

service CombineService {{ "{" }}{{ range .Functions }}
	{{ .ReturnType }} {{ .Name }}({{ .Arguments }}) ({{ .Annotations }});{{ end }}
}
`

type templateDesc struct {
	Namespace string
	Includes  []string
	Functions []thriftServiceFunction
}

func (d *templateDesc) appendIncludes(includes []string) {
	for _, include := range includes {
		if !slice.Contain(d.Includes, include) {
			d.Includes = append(d.Includes, include)
		}
	}
}

type thriftServiceFunction struct {
	Name        string
	ReturnType  string
	Arguments   string
	Annotations string
}

// includeAnalyzer convert src thrift file include to target thrift file include.
type includeAnalyzer struct {
	srcIncludes           map[string]string
	shouldIncludes        []string
	srcPath               string
	targetPath            string
	targetToSrcRelDirPath string
	typePrefix            string
}

func newIncludeAnalyzer(srcPath, targetPath string) (*includeAnalyzer, error) {
	var err error

	a := &includeAnalyzer{
		srcIncludes: make(map[string]string),
		srcPath:     srcPath,
		targetPath:  targetPath,
	}
	a.typePrefix = a.getIncludeName(srcPath)

	a.targetToSrcRelDirPath, err = a.getTargetToSrcRelDirPath(srcPath)
	if err != nil {
		return nil, err
	}
	return a, nil
}

func (a *includeAnalyzer) addSrcIncludes(includes []*parser.Include) {
	for _, include := range includes {
		a.srcIncludes[a.getIncludeName(include.Path)] = filepath.Join(a.targetToSrcRelDirPath, include.Path)
	}
}

func (a *includeAnalyzer) mustInclude(filePath string) {
	a.shouldIncludes = append(a.shouldIncludes, filepath.Join(a.targetToSrcRelDirPath, path.Base(filePath)))
}

// analyse analyse wether the include in srcIncludes list should be included in shouldIncludes list.
func (a *includeAnalyzer) analyse(typeName string) string {
	sp := strings.Split(typeName, ".")
	if includePath, ok := a.srcIncludes[sp[0]]; len(sp) > 1 && ok {
		a.shouldIncludes = append(a.shouldIncludes, includePath)
		return typeName
	} else {
		return a.typePrefix + "." + typeName
	}
}

// getIncludes return the should includes list.
func (a *includeAnalyzer) getIncludes() []string {
	return a.shouldIncludes
}

func (_ includeAnalyzer) getIncludeName(includePath string) string {
	sp := strings.Split(path.Base(includePath), ".")
	return strings.Join(sp[:len(sp)-1], ".")
}

func (a *includeAnalyzer) getTargetToSrcRelDirPath(srcPath string) (string, error) {
	p, err := filepath.Rel(path.Dir(a.targetPath), path.Dir(srcPath))
	if err != nil {
		return "", err
	}
	return p, nil
}

func Combine(asts []*parser.Thrift, outputPath string, namespace string) ([]byte, error) {
	desc := templateDesc{Namespace: namespace}
	for _, ast := range asts {
		includeAnalyzer, err := newIncludeAnalyzer(ast.Filename, outputPath)
		if err != nil {
			return nil, err
		}
		includeAnalyzer.addSrcIncludes(ast.GetIncludes())
		includeAnalyzer.mustInclude(ast.Filename)

		for _, service := range ast.Services {
			for _, function := range service.Functions {
				// annotations
				var annotationsStr []string
				for _, annotation := range function.Annotations {
					annotationsStr = append(annotationsStr, fmt.Sprintf("%s=\"%s\"", annotation.Key, strings.Join(annotation.Values, ",")))
				}

				// arguments
				var argumentsStr []string
				for _, arg := range function.Arguments {
					typeName := includeAnalyzer.analyse(arg.Type.Name)
					argumentsStr = append(argumentsStr, fmt.Sprintf("%d: %s %s", arg.ID, typeName, arg.Name))
				}

				// func return type
				funcTypeName := includeAnalyzer.analyse(function.FunctionType.Name)

				desc.Functions = append(desc.Functions, thriftServiceFunction{
					Name:        service.Name + "_" + function.Name,
					ReturnType:  funcTypeName,
					Arguments:   strings.Join(argumentsStr, ", "),
					Annotations: strings.Join(annotationsStr, " "),
				})
			}
		}

		desc.appendIncludes(includeAnalyzer.getIncludes())
	}

	tmp, err := template.New("COMBINE_TEMPLATE").Parse(templateText)
	if err != nil {
		return nil, err
	}

	var buf bytes.Buffer
	if err := tmp.Execute(&buf, desc); err != nil {
		panic(err)
	}
	return buf.Bytes(), nil
}
